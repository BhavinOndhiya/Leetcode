class Solution {
public:
    void solve(vector<string>&ans,int n,int open,int close,string result){
        //base case
        if(open==0 && close==0){
            ans.push_back(result);
            return;
        }
        //include open
        if(open>0){
            result.push_back('(');
            solve(ans,n,open-1,close,result);
            //backtrack
            result.pop_back();
        }

        //include close
        if(close>open){
            result.push_back(')');
            solve(ans,n,open,close-1,result);
            //backtrack
            result.pop_back();
        }
    }
    vector<string> generateParenthesis(int n) {
        vector<string>ans;
        int open=n;
        int close=n;
        string result="";
        solve(ans,n,open,close,result);
        return ans;
    }
};
